source("~/Desktop/curatedTBData/R/TBSignatureProfiling.R")
Khatri_set_PTB_Others = readRDS("~/Desktop/Khatri_set_PTB_Others.RDS")

sample_score <- evaluateOriginalModel(input = Khatri_set_PTB_Others[[3]], 
                                      geneSignaturesName = "Zhao_NANO_6")
gene_set_Retraining

# Run the entire analysis
sample_score_list <- lapply(Khatri_set_PTB_Others, function(x)
    evaluateOriginalModel(input = x, useAssay = 1))

# sample_score_list <- lapply(Khatri_set_PTB_Others, function(x)
#     evaluateOriginalModel(input = x, useAssay = 1, 
#                           geneSignaturesName = c("Zak_RISK_16")))

signature_NoRetraining <- c("Anderson_42", "Anderson_OD_51", "Kaforou_27",
                            "Kaforou_OD_44", "Kaforou_OD_53", "Sweeney_OD_3")

# Replace daCosta_OD_3 with LauxdaCosta_OD_3 to match with TBSignatureProfiler
signature_Retraining <- c("Maertzdorf_4", "Maertzdorf_15", "LauxdaCosta_OD_3",
                          "Verhagen_10", "Jacobsen_3", "Sambarey_HIV_10",
                          "Leong_24", "Berry_OD_86", "Berry_393", "Bloom_OD_144",
                          "Suliman_RISK_4", "Zak_RISK_16", "Leong_RISK_29")
Khatri_set_num_24 = readRDS("~/Desktop/Khatri_set_num_24.RDS")
get_weighted_mean <- function(dat, signature, train_list, percent=0.95,
                              num.boot = NULL, box_plot = FALSE){
    lower <- (1-percent)/2
    upper <- 1-lower
    traindata <- train_list[[signature]]
    dat <- dat %>% dplyr::filter(!GSE %in% traindata & Signature == signature)
    observations <- dat$Observation
    weighted_mean <- sum(dat$AUC * observations, na.rm = T)/sum(observations, na.rm = T)
    if(is.null(num.boot)){
        return(weighted_mean)
        
    }else{
        bootCI <- lapply(seq_len(num.boot), function(x){
            index <- sample(seq_len(nrow(dat)), replace = TRUE)
            AUC_boot <- dat$AUC[index]
            obs_boot <- dat$Observation[index]
            
            sum(AUC_boot * obs_boot, na.rm = T)/sum(obs_boot, na.rm = T)
            
        })
        bootCI <- unlist(bootCI)
        
        bootCI <- stats::na.omit(bootCI)
        if (box_plot){
            re <- data.frame(Signature = signature, weighted_mean = bootCI)
            return(re)
            
        }
        
        LowerAUC <- stats::quantile(bootCI, prob=lower, na.rm=TRUE)
        UpperAUC <- stats::quantile(bootCI, prob=upper, na.rm=TRUE)
        re <- c(weighted_mean,round(LowerAUC,4), round(UpperAUC,4))
        names(re) <- c("Weighted Mean", paste0("CI lower.",lower*100,"%"),
                       paste0("CI upper.",upper*100,"%"))
        return(re)
        
    }
    
}

out_list_combine_NoRetraining <- combine_auc(sample_score_list, annotationColName = "TBStatus",
                                         signatureColNames = paste0(c(signature_NoRetraining,signature_Retraining), "_OriginalModel"),
                                         num.boot = NULL, percent = 0.95, AUC.abs = F)
AUC_OriginalModel_NoRetraining <- c()
out_list_combine_join_NoRetraining <- out_list_combine_NoRetraining %>%
    dplyr::inner_join(Khatri_set_num_24, by=c("GSE" = "GSE"))
out_list_combine_join_NoRetraining$Signature <- gsub("_OriginalModel","",
                                                     out_list_combine_join_NoRetraining$Signature)

Khatri_training = readRDS("~/Desktop/Khatri_training.RDS")
out_list_NoRetraining_final1 <- lapply(c(signature_NoRetraining,signature_Retraining), function(x){
    get_weighted_mean(out_list_combine_join_NoRetraining, x, Khatri_training,
                      num.boot = 10000)
})
out_list_NoRetraining_final <- do.call(rbind, out_list_NoRetraining_final1) %>% data.frame()
row.names(out_list_NoRetraining_final) <- c(signature_NoRetraining,signature_Retraining)
out_list_NoRetraining_final$Method <- "OriginalModel"
out_list_NoRetraining_final$Signature <- row.names(out_list_NoRetraining_final)
View(out_list_NoRetraining_final)



sample_score_list_combine <- combine_auc(sample_score_list, annotationColName = "TBStatus",
                                           signatureColNames = paste0(c("Sambarey_HIV_10", "Zak_RISK_16",
                                                                        "Suliman_RISK_4", "LauxdaCosta_OD_3"), "_OriginalModel"),
                                           num.boot = NULL, percent = 0.95, AUC.abs = F)

aa=sample_score_list_combine %>% dplyr::filter(Signature == "Zak_RISK_16_OriginalModel")
bb=out_list_combine_Retraining %>% dplyr::filter(Signature == "Zak_RISK_16_OriginalModel")
aa %>% inner_join(bb, by = ("GSE" = "GSE")) %>% View
out_list_Retraining_old$GSE28623$Sambarey_HIV_10_OriginalModel
sample_score_list$GSE28623$Sambarey_HIV_10_OriginalModel


sample_score <- ObtainSampleScore_OriginalModel(theObject_train, useAssay=1, 
                                                gene_set = TBsignatures[["Leong_RISK_29"]], 
                                                input = Khatri_set_PTB_Others[[3]], 
                                                obtainDiagnosis = TRUE, 
                                                annotationColName = "TBStatus", 
                                                SigName = "Leong_RISK_29", 
                                                FUN = "LeongOriginalModel")
ObtainSampleScore_OriginalModel(theObject_train, useAssay, 
                                TBsignatures[[sig]], input, 
                                TRUE, "TBStatus", sig, 
                                FUN = "LeongOriginalModel")

ObtainSampleScore_OriginalModel <- function(theObject_train, useAssay, gene_set, 
                                            input, SigName, obtainDiagnosis, 
                                            annotationColName, FUN) {
    dat_test_sig <- ref_combat_impute(theObject_train, useAssay, 
                                      gene_set, input, SigName)
    print("done with ref combat")
    dat_list <- subsetGeneSet(theObject_train, gene_set, useAssay,
                              obtainDiagnosis, annotationColName)
    print("done with subset list")
    
    if(is.null(dat_test_sig)) {
        sample_score <- rep(NA, ncol(input))
        return(sample_score)
    }
    else {
        FUN <- match.fun(FUN)
        print("Start training")
        sample_score <- FUN(dat_list, dat_test_sig)
        print("Done training")
        return(sample_score)
    }
    
}
ROCit::rocit(sample_score,Khatri_set_PTB_Others[[3]]$TBStatus)$AUC
ROCit::rocit(out_list_Retraining[[3]]$Leong_RISK_29_OriginalModel,Khatri_set_PTB_Others[[3]]$TBStatus)$AUC


re_Retraining <- evaluateOriginalModel(input = TB_hiv, useAssay = "counts",
                            geneSignaturesName = c(gene_set_Retraining))
re_NoRetraining <- evaluateOriginalModel(input = TB_hiv, useAssay = "counts",
                                       geneSignaturesName = gene_set_NoRetraining)


# Add Duffy_MOUSE_23 to TBSignatureProfiler
addTBsignature(sigsymbols = c("GBP2", "SLAMF8", "IL27", "GPR141","CD300E",
                              "MS4A6A", "VCAN", "PLAC8", "MS4A4A", "ALPK1",
                              "TMEM51", "TGM2", "HAVCR2", "IQSEC2", "CX3CR1",
                              "HFE", "ARHGEF10L", "C3", "CCR5", "TPPP3",
                              "ZFYVE9", "SH2D1B", "KLRG1"),
               authname = "Duffy",
               sigtype = "Disease",
               tissuetype = "PBMC",
               signame_common = "CMTB_CT",
               saveobjs = FALSE,
               views = FALSE)

addTBsignature(sigsymbols = c("GBP2", "SLAMF8", "IL27", "GPR141","CD300E",
                              "MS4A6A", "VCAN", "PLAC8", "MS4A4A", "ALPK1",
                              "TMEM51", "TGM2", "HAVCR2", "IQSEC2", "CX3CR1",
                              "HFE", "ARHGEF10L", "C3", "CCR5", "TPPP3", 
                              "ZFYVE9", "SH2D1B", "KLRG1"),
               authname = "Duffy",
               signame_common = "CMTB_CT",
               sigtype = "Disease",
               tissuetype = "PBMC",
               saveobjs = TRUE,
               views = TRUE)

mkTBreference <- function(TBsigname, ref, DOInum) {
    cat("\\item{\\strong{", TBsigname, "}}{: ", ref,
        " \\href{http://dx.doi.org/", DOInum, "}{", DOInum, "}}", sep = "")
}

mkTBreference(TBsigname = "Duffy_23", # The name output in a message from addTBsignature()
              ref = "Duffy FJ, Olson GS, Gold ES, Jahn A, Aderem A, Aitchison J, Rothchild AC, Diercks AH, Nemeth J. A contained Mycobacterium tuberculosis mouse infection model predicts active disease and containment in humans. The Journal of Infectious Diseases. 2021 Mar 10.",
              DOInum = "10.1093/infdis/jiab130")




