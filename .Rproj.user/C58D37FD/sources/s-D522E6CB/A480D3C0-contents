# Use ref combat and imputation to build training dataset
# Build a function that goes to the curatedTBData to grab the training data
# The model should be pre-exist and we only need the testing data to make prediciton

## Import some useful functions

Khatri_set_PTB_Others <- readRDS("~/Desktop/Khatri_set_PTB_Others.RDS")
# Starting retrain  model
theObject_train_list_temp <- list(Maertzdorf_4 = Khatri_set_list$GSE74092,
                                  Maertzdorf_15 = Khatri_set_list$GSE74092,
                                  daCosta_OD_3 = Khatri_set_PTB_Others$GSE42834_Khatri,
                                  Verhagen_10 = Khatri_set_PTB_Others$GSE41055,
                                  Jacobsen_3 = Khatri_set_PTB_Others$GSE19491_Khatri,
                                  Sambarey_HIV_10 = Khatri_set_PTB_Others$GSE37250,
                                  Berry_OD_86 = Khatri_set_PTB_Others$GSE19491_Khatri,
                                  Berry_393 = Khatri_set_PTB_Others$GSE19491_Khatri,
                                  Leong_24 = Khatri_set_PTB_Others$GSE101705,
                                  Bloom_OD_144 = Khatri_set_PTB_Others$GSE42834_Khatri,
                                  Suliman_RISK_4 = Khatri_set_PTB_Others$GSE94438,
                                  Zak_RISK_16 = Khatri_set_PTB_Others$GSE79362_Khatri)

ref_combat_train_test <- function(theObject_train, theObject_test=NULL,
                                  useAssay, gene_set,
                                  annotationColName){

  runindata_train <- SummarizedExperiment::assays(theObject_train)[[useAssay]]

  dat_sig_train <- runindata_train %>% data.frame() %>%
    dplyr::filter(row.names(runindata_train) %in% gene_set) %>% t()

  # Sort gene features alphabetically
  # This step is important b/c some the order of features matter in some algorithm
  # e.g. SVM in Zak_RISK_16

  dat_sig_train <- dat_sig_train[,sort(colnames(dat_sig_train))]
  dat_list <- list(trainSig = dat_sig_train,
                   testSig = dat_sig_train)

  col_info_train <- SummarizedExperiment::colData(theObject_train
                                                  [,row.names(dat_sig_train)])
  diagnosis_train <- col_info_train[, annotationColName]

  dat_list$diagnosis_train <- diagnosis_train
  return(dat_list)

}
########### Maertzdorf_4 (RF) ###########
# Train data

Maertzdorf_4 <- function(theObject_train, useAssay = NULL,
                         annotationColName, signatureName){

    if(is.null(useAssay)){useAssay = 1}

    gene_set <- TBsignatures[[signatureName]]

    # Prepare training and testing data
    dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                      useAssay, gene_set, annotationColName)

    # Relevel diagnosis_train
    # Always use PTB as the evaluated level
    diagnosis_train <- dat_list$diagnosis_train
    # diagnosis_train_unique <- unique(dat_list$diagnosis_train)
    diagnosis_train_num <- ifelse(diagnosis_train == "PTB", 1, 0 )
    # ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "PTB")]
    # diagnosis_train <- factor(diagnosis_train, levels = c(ref_level,"PTB"))

    # Build signature model
    # Use factor for RF
    sig_model <- randomForest::randomForest(x = dat_list$trainSig,
                                            y = as.factor(diagnosis_train_num),
                                            ntree = 5000, importance = TRUE)
    data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

    sample_score <- stats::predict(object = sig_model,
                                   newdata = dat_list$testSig,
                                   type = "prob")
    pred_score <- sample_score[,2]
    message("The in-sample AUC is:")
    print(ROCit::rocit(pred_score, theObject_train$TBStatus)$AUC)

    return(data_model)

}

Maertzdorf_4_re <- Maertzdorf_4(theObject_train = theObject_train_list_temp$Maertzdorf_4,
                                useAssay = NULL,
                                annotationColName = "TBStatus",
                                signatureName = "Maertzdorf_4")

Maertzdorf_4_data_model <- list(data_train = Maertzdorf_4_re$data_train,
                                model = Maertzdorf_4_re$OriginalModel)
aa = assay(Khatri_set_PTB_Others[[1]])
aa_test = aa %>% data.frame() %>%
  dplyr::filter(row.names(aa) %in% TBsignatures$Maertzdorf_4) %>% t()

predict(Maertzdorf_4_re$OriginalModel, aa_test)
predict(OriginalModel$Maertzdorf_4, aa_test)
########### Maertzdorf_15 (RF) ###########
# Train data

Maertzdorf_15 <- function(theObject_train, useAssay = NULL,
                         annotationColName, signatureName){

  if(is.null(useAssay)){useAssay = 1}

  gene_set <- TBsignatures[[signatureName]]

  # Prepare training and testing data
  dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                    useAssay, gene_set, annotationColName)

  # Relevel diagnosis_train
  # Always use PTB as the evaluated level
  diagnosis_train <- dat_list$diagnosis_train
  # diagnosis_train_unique <- unique(dat_list$diagnosis_train)
  diagnosis_train_num <- ifelse(diagnosis_train == "PTB", 1, 0 )
  # ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "PTB")]
  # diagnosis_train <- factor(diagnosis_train, levels = c(ref_level,"PTB"))

  # Build signature model
  # Use factor for RF
  sig_model <- randomForest::randomForest(x = dat_list$trainSig,
                                          y = as.factor(diagnosis_train_num),
                                          ntree = 5000, importance = TRUE)
  data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

  sample_score <- stats::predict(object = sig_model,
                                 newdata = dat_list$testSig,
                                 type = "prob")
  pred_score <- sample_score[,2]
  message("The in-sample AUC is:")
  print(ROCit::rocit(pred_score, theObject_train$TBStatus)$AUC)

  return(data_model)

}

Maertzdorf_15_re <- Maertzdorf_15(theObject_train = theObject_train_list_temp$Maertzdorf_15,
                                useAssay = NULL,
                                annotationColName = "TBStatus",
                                signatureName = "Maertzdorf_15")

Maertzdorf_15_data_model <- list(data_train = Maertzdorf_15_re$data_train,
                                model = Maertzdorf_15_re$OriginalModel)

########### daCosta_OD_3 (RF) ###########
# Train data

daCosta_OD_3 <- function(theObject_train, useAssay = NULL,
                          annotationColName, signatureName){

  if(is.null(useAssay)){useAssay = 1}

  gene_set <- TBsignatures[[signatureName]]

  # Prepare training and testing data
  dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                    useAssay, gene_set, annotationColName)

  # Relevel diagnosis_train
  # Always use PTB as the evaluated level
  diagnosis_train <- dat_list$diagnosis_train
  # diagnosis_train_unique <- unique(dat_list$diagnosis_train)
  diagnosis_train_num <- ifelse(diagnosis_train == "PTB", 1, 0 )
  # ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "PTB")]
  # diagnosis_train <- factor(diagnosis_train, levels = c(ref_level,"PTB"))

  # Build signature model
  # Use factor for RF
  sig_model <- randomForest::randomForest(x = dat_list$trainSig,
                                          y = as.factor(diagnosis_train_num),
                                          ntree = 5000, importance = TRUE)
  data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

  sample_score <- stats::predict(object = sig_model,
                                 newdata = dat_list$testSig,
                                 type = "prob")
  pred_score <- sample_score[,2]
  message("The in-sample AUC is:")
  print(ROCit::rocit(pred_score, theObject_train$TBStatus)$AUC)

  return(data_model)

}

daCosta_OD_3_re <- daCosta_OD_3(theObject_train = theObject_train_list_temp$daCosta_OD_3,
                                  useAssay = NULL,
                                  annotationColName = "TBStatus",
                                  signatureName = "daCosta_OD_3")

daCosta_OD_3_data_model <- list(data_train = daCosta_OD_3_re$data_train,
                                 model = daCosta_OD_3_re$OriginalModel)

########### Verhagen_10 (RF) ###########
Verhagen_10 <- function(theObject_train, useAssay = NULL,
                        annotationColName, signatureName){

    if(is.null(useAssay)){useAssay = 1}

    gene_set <- TBsignatures[[signatureName]]

    # Prepare training and testing data
    dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                      useAssay, gene_set, annotationColName)
    # Relevel diagnosis_train
    # Always use PTB as the evaluated level
    diagnosis_train <- dat_list$diagnosis_train
    diagnosis_train_unique <- unique(dat_list$diagnosis_train)
    ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "PTB")]
    diagnosis_train <- factor(diagnosis_train, levels = c(ref_level,"PTB"))

    # Build signature model
    sig_model <- randomForest::randomForest(x = dat_list$trainSig,
                                            y = diagnosis_train,
                                            ntree = 5000)
    data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

    sample_score <- stats::predict(object = sig_model,
                                   newdata = dat_list$testSig,
                                   type = "prob")
    pred_score <- sample_score[,2]
    message("The in-sample AUC is:")
    print(ROCit::rocit(pred_score, theObject_train$TBStatus)$AUC)

    return(data_model)
    # col_info <- SummarizedExperiment::colData(input)
    # col_info[, paste0(signatureName,"_OriginalModel")] <- pred_score
    # SummarizedExperiment::colData(input) <- col_info
    # return(input)

}

Verhagen_10_re <- Verhagen_10(theObject_train_list_temp$Verhagen_10,
                              useAssay = NULL,
                              annotationColName = "TBStatus",
                              signatureName = "Verhagen_10")

Verhagen_10_data_model <- list(data_train = Verhagen_10_re$data_train,
                               model = Verhagen_10_re$OriginalModel)

####### Jacobsen_3 (LDA) ###########
Jacobsen_3 <- function(theObject_train, useAssay = NULL,
                       annotationColName, signatureName){

    if(is.null(useAssay)){useAssay = 1}

    gene_set <- TBsignatures[[signatureName]]

    # Prepare training and testing data
    dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                      useAssay, gene_set, annotationColName)
    # Relevel diagnosis_train
    # Always use PTB as the evaluated level
    diagnosis_train <- dat_list$diagnosis_train
    diagnosis_train_unique <- unique(dat_list$diagnosis_train)
    ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "PTB")]
    diagnosis_train <- as.integer(factor(diagnosis_train, levels = c(ref_level,"PTB")))

    # Build signature model
    sig_model <- MASS::lda(diagnosis_train ~ .,
                           data.frame(dat_list$trainSig, diagnosis_train))
    data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

    sample_score <- stats::predict(sig_model,data.frame(dat_list$testSig))

    pred_score <- as.vector(sample_score$posterior[,2])

    message("The in-sample AUC is:")
    print(ROCit::rocit(pred_score, theObject_train$TBStatus)$AUC)

    return(data_model)

}

Jacobsen_3_re <- Jacobsen_3(theObject_train_list_temp$Jacobsen_3,
                            useAssay = NULL,
                            annotationColName = "TBStatus",
                            signatureName = "Jacobsen_3")

Jacobsen_3_data_model <- list(data_train = Jacobsen_3_re$data_train,
                              model = Jacobsen_3_re$OriginalModel)

########## Sambarey_HIV_10 (LDA) ###########
Sambarey_HIV_10 <- function(theObject_train, useAssay = NULL,
                            annotationColName, signatureName){

    if(is.null(useAssay)){useAssay = 1}

    gene_set <- TBsignatures[[signatureName]]

    # Prepare training and testing data
    dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                      useAssay, gene_set, annotationColName)
    # Relevel diagnosis_train
    # Always use PTB as the evaluated level
    diagnosis_train <- dat_list$diagnosis_train
    diagnosis_train_unique <- unique(dat_list$diagnosis_train)
    ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "PTB")]
    diagnosis_train <- as.integer(factor(diagnosis_train, levels = c(ref_level,"PTB")))

    # Build signature model
    sig_model <- MASS::lda(diagnosis_train ~ .,
                           data.frame(dat_list$trainSig, diagnosis_train))
    data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

    sample_score <- stats::predict(sig_model,data.frame(dat_list$testSig))

    pred_score <- as.vector(sample_score$posterior[,2])

    message("The in-sample AUC is:")
    print(ROCit::rocit(pred_score, theObject_train$TBStatus)$AUC)

    return(data_model)

}

Sambarey_HIV_10_re <- Sambarey_HIV_10(theObject_train_list_temp$Sambarey_HIV_10,
                                      useAssay = NULL,
                                      annotationColName = "TBStatus",
                                      signatureName = "Sambarey_HIV_10")

Sambarey_HIV_10_data_model <- list(data_train = Sambarey_HIV_10_re$data_train,
                                   model = Sambarey_HIV_10_re$OriginalModel)
########### Leong_24 (RLR) ###########
Leong_24 <- function(theObject_train, useAssay = NULL,
                     annotationColName, signatureName){

    if(is.null(useAssay)){useAssay = 1}

    gene_set <- TBsignatures[[signatureName]]

    # Prepare training and testing data
    dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                      useAssay, gene_set, annotationColName)
    # Relevel diagnosis_train
    # Always use PTB as the evaluated level
    diagnosis_train <- dat_list$diagnosis_train
    diagnosis_train_unique <- unique(dat_list$diagnosis_train)
    ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "PTB")]
    diagnosis_train <- as.integer(factor(diagnosis_train, levels = c(ref_level,"PTB")))


    # Build signature model
    # Use integer in RLR
    sig_model <- glmnet::cv.glmnet(x = dat_list$trainSig,
                                   y = diagnosis_train)

    data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

    sample_score <- predict(sig_model$glmnet.fit, s = sig_model$lambda.min,
                            newx = dat_list$testSig,
                            na.action = na.omit)

    pred_score <- as.vector(sample_score)

    message("The in-sample AUC is:")
    print(ROCit::rocit(pred_score, theObject_train$TBStatus)$AUC)

    return(data_model)
}

Leong_24_re <- Leong_24(theObject_train_list_temp$Leong_24,
                        useAssay = NULL,
                        annotationColName = "TBStatus",
                        signatureName = "Leong_24")

Leong_24_data_model <- list(data_train = Leong_24_re$data_train,
                            model = Leong_24_re$OriginalModel)

########### Berry_OD_86 (KNN) ###########

Berry_OD_86 <- function(theObject_train, useAssay = NULL,
                        annotationColName, signatureName){

    if(is.null(useAssay)){useAssay = 1}

    gene_set <- TBsignatures[[signatureName]]

    # Prepare training and testing data
    dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                      useAssay, gene_set, annotationColName)
    # Relevel diagnosis_train
    # Always use PTB as the evaluated level
    diagnosis_train <- dat_list$diagnosis_train
    diagnosis_train_unique <- unique(dat_list$diagnosis_train)
    ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "PTB")]
    diagnosis_train <- as.integer(factor(diagnosis_train, levels = c(ref_level,"PTB")))


    # Build signature model
    # Used integer in KNN
    sig_model <- class::knn(train = dat_list$trainSig, test = dat_list$testSig,
                            cl= diagnosis_train, k = 10, prob = T)
    data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

    sample_score_ori <- attributes(sig_model)$prob
    pred_result <- data.frame(sample_score_ori,sig_model)

    pred_score <- sapply(1:nrow(pred_result), function(i){
        if(pred_result$sig_model[i] == 2){
            pred_result$sample_score_ori[i]
        }else{1-pred_result$sample_score_ori[i]}
    })

    message("The in-sample AUC is:")
    print(ROCit::rocit(pred_score, theObject_train$TBStatus)$AUC)

    return(data_model)


}

Berry_OD_86_re <- Berry_OD_86(theObject_train_list_temp$Berry_OD_86,
                              useAssay = NULL,
                              annotationColName = "TBStatus",
                              signatureName = "Berry_OD_86")

Berry_OD_86_data_model <- list(data_train = Berry_OD_86_re$data_train,
                               model = Berry_OD_86_re$OriginalModel)

########### Berry_393 (KNN) ###########
Berry_393 <- function(theObject_train, useAssay = NULL,
                      annotationColName, signatureName){

    if(is.null(useAssay)){useAssay = 1}

    gene_set <- TBsignatures[[signatureName]]

    # Prepare training and testing data
    dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                      useAssay, gene_set, annotationColName)
    diagnosis_train <- dat_list$diagnosis_train
    # Relevel diagnosis_train
    # Always use PTB as the evaluated level
    diagnosis_train_unique <- unique(dat_list$diagnosis_train)
    ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "PTB")]
    diagnosis_train <- as.integer(factor(diagnosis_train, levels = c(ref_level,"PTB")))

    # Build signature model
    # Used integer in KNN
    sig_model <- class::knn(train = dat_list$trainSig, test = dat_list$testSig,
                            cl= diagnosis_train, k = 10, prob = T)
    data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

    sample_score_ori <- attributes(sig_model)$prob
    pred_result <- data.frame(sample_score_ori,sig_model)

    pred_score <- sapply(1:nrow(pred_result), function(i){
        if(pred_result$sig_model[i] == 2){
            pred_result$sample_score_ori[i]
        }else{1-pred_result$sample_score_ori[i]}
    })

    message("The in-sample AUC is:")
    print(ROCit::rocit(pred_score, theObject_train$TBStatus)$AUC)

    return(data_model)


}

Berry_393_re <- Berry_393(theObject_train_list_temp$Berry_393,
                          useAssay = NULL,
                          annotationColName = "TBStatus",
                          signatureName = "Berry_393")

Berry_393_data_model <- list(data_train = Berry_393_re$data_train,
                             model = Berry_393_re$OriginalModel)

########### Bloom_OD_144 (SVM) ###########
Bloom_OD_144 <- function(theObject_train, useAssay = NULL,
                         annotationColName, signatureName){

    if(is.null(useAssay)){useAssay = 1}

    gene_set <- TBsignatures[[signatureName]]

    # Prepare training and testing data
    dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                      useAssay, gene_set, annotationColName)

    # Relevel diagnosis_train
    # Always use PTB as the evaluated level
    diagnosis_train <- dat_list$diagnosis_train
    diagnosis_train_unique <- unique(dat_list$diagnosis_train)
    ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "PTB")]
    diagnosis_train <- as.integer(factor(diagnosis_train, levels = c(ref_level,"PTB")))

    # Build signature model
    sig_model <- suppressWarnings(e1071::svm(x = dat_list$trainSig,
                                             y = diagnosis_train,
                                             type = "nu-regression", kernel = "linear",
                                             cost = 100, cachesize = 5000, tolerance = 0.01,
                                             shrinking = FALSE, cross = 3))
    data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

    pred_score <- stats::predict(sig_model, dat_list$testSig)

    message("The in-sample AUC is:")
    print(ROCit::rocit(pred_score, theObject_train$TBStatus)$AUC)

    return(data_model)

}
# GSE42834_combine_Khatri_PTB_OD <- GSE42834_combine_Khatri[,GSE42834_combine_Khatri$TBStatus %in% c("PTB","OD")]
Bloom_OD_144_re <- Bloom_OD_144(theObject_train = theObject_train_list_temp$Bloom_OD_144,
                                useAssay = NULL,
                                annotationColName = "TBStatus",
                                signatureName = "Bloom_OD_144")

Bloom_OD_144_data_model <- list(data_train = Bloom_OD_144_re$data_train,
                                model = Bloom_OD_144_re$OriginalModel)

########### Suliman_RISK_4 (SVM) ############
Suliman_RISK_4 <- function(theObject_train, useAssay = NULL,
                           annotationColName, signatureName){

    if(is.null(useAssay)){useAssay = 1}

    gene_set <- TBsignatures[[signatureName]]

    # Prepare training and testing data
    dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                      useAssay, gene_set, annotationColName)
    # Relevel diagnosis_train
    # Always use PTB as the evaluated level
    diagnosis_train <- dat_list$diagnosis_train
    diagnosis_train_unique <- unique(dat_list$diagnosis_train)
    ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "Positive")]
    diagnosis_train <- as.integer(factor(diagnosis_train, levels = c(ref_level,"Positive")))


    # Build signature model
    dat_suliman_train <- dat_list$trainSig %>% data.frame() %>%
        dplyr::mutate(GAS6_CD1C=GAS6/CD1C, SEPT4_BLK=SEPT4/BLK,
                      SEPT4_CD1C=SEPT4/CD1C, GAS6_BLK=GAS6/BLK) %>%
        dplyr::select(GAS6_CD1C,SEPT4_BLK,SEPT4_CD1C,GAS6_BLK)

    dat_suliman_test <- dat_list$testSig %>% data.frame() %>%
        dplyr::mutate(GAS6_CD1C=GAS6/CD1C, SEPT4_BLK=SEPT4/BLK,
                      SEPT4_CD1C=SEPT4/CD1C, GAS6_BLK=GAS6/BLK) %>%
        dplyr::select(GAS6_CD1C,SEPT4_BLK,SEPT4_CD1C,GAS6_BLK)

    sig_model <- suppressWarnings(e1071::svm(x = dat_suliman_train,
                                             y = diagnosis_train,
                                             type = "nu-regression", kernel = "linear",
                                             cost = 100, cachesize = 5000, tolerance = 0.01,
                                             shrinking = FALSE, cross = 3))
    data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

    pred_score <- stats::predict(sig_model, dat_suliman_test)

    message("The in-sample AUC for paired ratio is:")
    print(ROCit::rocit(pred_score, theObject_train$Progression)$AUC)

    sig_model1 <- suppressWarnings(e1071::svm(x = dat_list$trainSig,
                                              y = diagnosis_train,
                                              type = "nu-regression", kernel = "linear",
                                              cost = 100, cachesize = 5000, tolerance = 0.01,
                                              shrinking = FALSE, cross = 3))
    pred_score1 <- stats::predict(sig_model1, dat_list$testSig)

    message("The in-sample AUC for normal is:")
    print(ROCit::rocit(pred_score1, theObject_train$Progression)$AUC)

    return(data_model)
}

Suliman_RISK_4_re <- Suliman_RISK_4(theObject_train_list_temp$Suliman_RISK_4,
                                    useAssay = NULL,
                                    annotationColName = "Progression",
                                    signatureName = "Suliman_RISK_4")

Suliman_RISK_4_data_model <- list(data_train = Suliman_RISK_4_re$data_train,
                                  model = Suliman_RISK_4_re$OriginalModel)

########### Zak_RISK_16 (SVM) ##############
Zak_RISK_16 <- function(theObject_train, useAssay = NULL,
                        annotationColName, signatureName){

    if(is.null(useAssay)){useAssay = 1}

    gene_set <- TBsignatures[[signatureName]]

    # Prepare training and testing data
    dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                      useAssay, gene_set, annotationColName)

    # Relevel diagnosis_train
    # Always use PTB as the evaluated level
    diagnosis_train <- dat_list$diagnosis_train
    diagnosis_train_unique <- unique(dat_list$diagnosis_train)
    ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "Positive")]
    diagnosis_train <- as.integer(factor(diagnosis_train, levels = c(ref_level,"Positive")))

    # Build signature model
    sig_model <- suppressWarnings(e1071::svm(x = dat_list$trainSig,
                                             y = diagnosis_train,
                                             type = "nu-regression", kernel = "linear",
                                             cost = 100, cachesize = 5000, tolerance = 0.01,
                                             shrinking = FALSE, cross = 3))
    data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

    pred_score <- stats::predict(sig_model, dat_list$testSig)

    message("The in-sample AUC is:")
    print(ROCit::rocit(pred_score, theObject_train$Progression)$AUC)

    return(data_model)

}

# theObject_train_list_temp$Zak_RISK_16
GSE79362_train_sub <- GSE79362_train_full[,GSE79362_train_full$ACS_cohort %in% "Training"]
GSE79362_test_sub <- GSE79362_train_full[,GSE79362_train_full$ACS_cohort %in% "Test"]
GSE79362_test_sub <- GSE79362_train_full
Zak_RISK_16_re <- Zak_RISK_16(GSE79362_train_sub,
                              useAssay = NULL,
                              annotationColName = "Progression",
                              signatureName = "Zak_RISK_16")
dat_test <- assay(GSE79362_test_sub) %>% data.frame() %>%
  dplyr::filter(row.names(assay(GSE79362_test_sub)) %in% TBsignatures$Zak_RISK_16) %>% t()
dat_test <- dat_test[,sort(colnames(dat_test))]
pred_score = stats::predict(Zak_RISK_16_re$OriginalModel, dat_test,type='prob')
print(ROCit::rocit(pred_score, GSE79362_test_sub$Progression)$AUC)
kkk=ROCit::measureit(pred_score, GSE79362_test_sub$Progression, measure=c("ACC","SENS","SPEC"))
Zak_RISK_16_data_model <- list(data_train = Zak_RISK_16_re$data_train,
                               model = Zak_RISK_16_re$OriginalModel)
GSE79362_test_sub$ak <- pred_score
aa = TBSignatureProfiler::runTBsigProfiler(input = GSE79362_test_sub, useAssay = 1,
                                           signatures = TBsignatures["Zak_RISK_16"],
                                           algorithm = "ssGSEA",
                                           combineSigAndAlgorithm = TRUE)
combine_auc(list(GSE79362_test_sub,aa),annotationColName = "Progression",
            signatureColNames = c("ak","Zak_RISK_16"),
            num.boot = 100, percent = 0.95)
########### Leong_RISK_29 (glmnet) ##############
Leong_RISK_29 <- function(theObject_train, useAssay = NULL,
                          annotationColName, signatureName){
  if(is.null(useAssay)){useAssay = 1}

  gene_set <- TBsignatures[[signatureName]]

  # Prepare training and testing data
  dat_list <- ref_combat_train_test(theObject_train, theObject_test = NULL,
                                    useAssay, gene_set, annotationColName)

  # Relevel diagnosis_train
  # Always use PTB as the evaluated level
  diagnosis_train <- dat_list$diagnosis_train
  diagnosis_train_unique <- unique(dat_list$diagnosis_train)
  ref_level <- diagnosis_train_unique[which(diagnosis_train_unique != "Positive")]
  diagnosis_train <- as.integer(factor(diagnosis_train, levels = c(ref_level,"Positive")))

  sig_model <- glmnet::cv.glmnet(x = dat_list$trainSig,
                                 y = diagnosis_train)

  data_model <- list(data_train = theObject_train, OriginalModel = sig_model)

  sample_score <- predict(sig_model$glmnet.fit, s = sig_model$lambda.min,
                          newx = dat_list$testSig ,
                          na.action = na.omit)

  pred_score <- as.vector(sample_score)

  message("The in-sample AUC is:")
  print(ROCit::rocit(pred_score, theObject_train$TBStatus)$AUC)

  return(data_model)

}

Leong_RISK_29_re <- Leong_RISK_29(theObject_train_list_temp$Zak_RISK_16,
                                    useAssay = NULL,
                                    annotationColName = "Progression",
                                    signatureName = "Leong_RISK_29")

Leong_RISK_29_data_model <- list(data_train = Leong_RISK_29_re$data_train,
                                  model = Leong_RISK_29_re$OriginalModel)
# Test on the Brazil Data: GSE112104
GSE112104_full <- SummarizedExperiment (list(counts = object_match$GSE112104[["assay_MatchProbe"]]),
                                        colData = colData(object_match$GSE112104))
theObject_train <- Leong_RISK_29_data_model$data_train
input <- GSE112104_full[,GSE112104_full$Progression %in% c("Positive","Negative")]
useAssay <- 1
gene_set <- TBsignatures$Leong_RISK_29
out <- ref_combat_impute(theObject_train, input, useAssay, gene_set,
                         SigName = "", geneMax = 0.8)
sig_model = Leong_RISK_29_data_model$model
sample_score <- predict(sig_model$glmnet.fit, s = sig_model$lambda.min,
                        newx = out,
                        na.action = na.omit)

pred_score <- as.vector(sample_score)
ROCit::rocit(pred_score,input$Progression)$AUC # 0.932
########### Save Model ##############
# Store OriginalModel
OriginalModel <- list(data_train = list(GSE19491 = Jacobsen_3_data_model$data_train,
                                        GSE42834 = daCosta_OD_3_data_model$data_train,
                                        GSE74092 = Maertzdorf_4_data_model$data_train,
                                        GSE37250 = Sambarey_HIV_10_data_model$data_train,
                                        GSE41055 = Verhagen_10_data_model$data_train,
                                        GSE101705 = Leong_24_data_model$data_train,
                                        GSE79362 = Zak_RISK_16_data_model$data_train,
                                        GSE94438 = Suliman_RISK_4_data_model$data_train),
                      Maertzdorf_4 = Maertzdorf_4_data_model$model,
                      Maertzdorf_15 = Maertzdorf_15_data_model$model,
                      daCosta_OD_3 = daCosta_OD_3_data_model$model,
                      Verhagen_10 = Verhagen_10_data_model$model,
                      Jacobsen_3 = Jacobsen_3_data_model$model,
                      Sambarey_HIV_10 = Sambarey_HIV_10_data_model$model,
                      Leong_24 = Leong_24_data_model$model,
                      Berry_OD_86 = Berry_OD_86_data_model$model,
                      Berry_393 = Berry_393_data_model$model,
                      Bloom_OD_144 = Bloom_OD_144_data_model$model,
                      Suliman_RISK_4 = Suliman_RISK_4_data_model$model,
                      Zak_RISK_16 = Zak_RISK_16_data_model$model,
                      Leong_RISK_29 = Leong_RISK_29_data_model$model)
OriginalModel$data_train$GSE79362 <- GSE79362_train_full
OriginalModel$Zak_RISK_16 <- Zak_RISK_16_re$OriginalModel
saveRDS(OriginalModel, "~/Desktop/OriginalModel.RDS")
