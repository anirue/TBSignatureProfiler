colnames(ridge_stan) <- colnames(X)
# Make posterior distribution plot
ridge_stan <- data.frame(stan_diabetes[,1:9])
colnames(ridge_stan) <- colnames(X)
ridge_stan$Type <- "NUTS"
ridge_MC <- data.frame(Res_diabetes[8001:Niter,1:9])
colnames(ridge_MC) <- colnames(X)
ridge_MC$Type <- "ARWM"
View(ridge_stan)
colnames(X)
# Make posterior distribution plot
ridge_stan <- data.frame(stan_diabetes[,1:9])
colnames(ridge_stan) <- colnames(X)
colnames(ridge_stan)[1] <- "Intercept"
View(ridge_stan)
reshape(ridge_stan)
reshape(ridge_stan,"long")
reshape(ridge_stan,direction="long")
melt(ridge_stan)
reshape2::melt(ridge_stan)
# Make posterior distribution plot
ridge_stan <- data.frame(stan_diabetes[,1:9])
colnames(ridge_stan) <- colnames(X)
colnames(ridge_stan)[1] <- "Intercept"
ridge_stan$Type <- "NUTS"
ridge_stan_long <- reshape2::melt(ridge_stan)
# Make posterior distribution plot
ridge_stan <- data.frame(stan_diabetes[,1:9])
colnames(ridge_stan) <- colnames(X)
colnames(ridge_stan)[1] <- "Intercept"
ridge_stan_long <- reshape2::melt(ridge_stan)
ridge_stan_long$Type <- "NUTS"
ridge_stan_long[1:4,]
ridge_MC <- data.frame(Res_diabetes[8001:Niter,1:9])
colnames(ridge_MC) <- colnames(X)
colnames(ridge_MC)[1] <- "Intercept"
ridge_MC_long <- reshape2::melt(ridge_MC)
ridge_MC$Type <- "ARWM"
myColors <- RColorBrewer::brewer.pal(2,"Set1")
myColors <- RColorBrewer::brewer.pal(3,"Set1")
ridge_all <- rbind(ridge_stan_long,ridge_MC_long)
ridge_MC <- data.frame(Res_diabetes[8001:Niter,1:9])
colnames(ridge_MC) <- colnames(X)
colnames(ridge_MC)[1] <- "Intercept"
ridge_MC_long <- reshape2::melt(ridge_MC)
ridge_MC_long$Type <- "ARWM"
ridge_all <- rbind(ridge_stan_long,ridge_MC_long)
ggplot(d_GSEA_split,aes(x=value,y=variable)) +
geom_density_ridges(aes(fill=factor(type)), alpha=0.8, scale = 1.0) +
scale_fill_manual( name = "Methods",values = myColors3) + theme_bw()
ggplot(ridge_all,aes(x=value,y=variable)) +
geom_density_ridges(aes(fill=factor(Type)), alpha=0.8, scale = 1.0) +
scale_fill_manual( name = "Methods",values = myColors) + theme_bw()
library(ggridges)
ggplot(ridge_all,aes(x=value,y=variable)) +
geom_density_ridges(aes(fill=factor(Type)), alpha=0.8, scale = 1.0) +
scale_fill_manual( name = "Methods",values = myColors) + theme_bw()
ggplot(ridge_all,aes(x=value,y=variable)) +
geom_density_ridges(aes(fill=factor(Type)), alpha=0.5, scale = 1.0) +
scale_fill_manual( name = "Methods",values = myColors) + theme_bw()
plot(fit, "acf", pars = "(Intercept)")
plot(post1, "acf", pars = "(Intercept)")
plot(post1, "acf", pars = colnames(X))
colnames(X)
plot(post1, "acf", pars = colnames(X)[2])
plot(post1, "acf", pars = colnames(X)[2:3])
plot(post1, "acf", pars = colnames(X)[2:9])
library(ggridges)
ggplot(ridge_all,aes(x=value,y=variable)) +
geom_density_ridges(aes(fill=factor(Type)), alpha=0.5, scale = 1.0) +
scale_fill_manual( name = "Methods",values = myColors) + theme_bw()
ggplot(ridge_all,aes(x=value,y=variable)) +
geom_density_ridges(aes(fill=factor(Type)), alpha=0.5, scale = 1.0, jittered_points=T) +
scale_fill_manual( name = "Methods",values = myColors) + theme_bw() +
geom_density_jittered
ggplot(ridge_all,aes(x=value,y=variable)) +
geom_density_ridges(aes(fill=factor(Type)), alpha=0.5, scale = 1.0, jittered_points=T) +
scale_fill_manual( name = "Methods",values = myColors) + theme_bw()
ggplot(ridge_all,aes(x=value,y=variable)) +
geom_density_ridges(aes(fill=factor(Type)), alpha=0.5, scale = 1.0) +
scale_fill_manual( name = "Methods",values = myColors) + theme_bw()
ggplot(ridge_stan_long,aes(x=value,y=variable)) +
geom_density_ridges( alpha=0.5, scale = 1.0) +
theme_bw()
ggplot(ridge_MC_long,aes(x=value,y=variable)) +
geom_density_ridges( alpha=0.5, scale = 1.0) +
theme_bw() + scale_fill_manual(values = myColors[2])
ggplot(ridge_MC_long,aes(x=value,y=variable)) +
geom_density_ridges( alpha=0.5, scale = 1.0, fill = myColors[2]) +
theme_bw()
ggplot(ridge_stan_long,aes(x=value,y=variable)) +
geom_density_ridges( alpha=0.5, scale = 1.0, fill = myColors[1]) +
theme_bw()
ggplot(ridge_stan_long,aes(x=value,y=variable)) +
geom_density_ridges( alpha=0.5, scale = 1.0, fill = myColors[1]) +
theme_bw() + geom_vline(xintercept = 0)
ggplot(ridge_MC_long,aes(x=value,y=variable)) +
geom_density_ridges( alpha=0.5, scale = 1.0, fill = myColors[2]) +
theme_bw() + geom_vline(xintercept = 0)
colnames(X)
colnames(X)[1]="Intercept"
for (i in 1:9){
#plot(Res_diabetes[8001:Niter,i],type='l',col='blue', main=sprintf("beta_%i",i-1))
acf(Res_diabetes[8001:Niter,i],lag.max=200,col='blue', main=colnames(X)[i])
#hist(Res_diabetes[8001:Niter,i],prob=T,ncl=50,col='blue', main=sprintf("beta_%i",i-1))
}
colnames(stan_diabetes)
par(mfrow=c(3,3))
for (i in 1:9){
#plot(stan_diabetes[,i],type='l',col='blue',
#     main = paste0("beta_",i-1), ylab = "");
acf(stan_diabetes[,i],lag.max=200,col='blue',
main = colnames(stan_diabetes)[i]);
#hist(stan_diabetes[,i],prob=T,ncl=50,col='blue',
#     main = paste0("beta_",i-1), xlab = "")
}
ggplot(ridge_stan_long,aes(x=value,y=variable)) +
geom_density_ridges( alpha=0.5, scale = 1.0, fill = myColors[1]) +
theme_bw() + geom_vline(xintercept = 0) +
theme(text=element_text(size=16))
ggplot(ridge_MC_long,aes(x=value,y=variable)) +
geom_density_ridges( alpha=0.5, scale = 1.0, fill = myColors[2]) +
theme_bw() + geom_vline(xintercept = 0) +
theme(text=element_text(size=16))
for(i in 1:ncol(Res_diabetes)){
print(ess(Res_diabetes[8001:Niter,i]))
}
for (i in 1:ncol(stan_diabetes)) {
print(ess(stan_diabetes[,i]))
}
dim(stan_diabetes)
length(Y)
colnames(stan_diabetes)
CI
citation('ROCit')
citation('Singscore')
citation('singscore')
citation('ROCit')
citation('sva')
citation("impute")
citation("TBSignatureProfiler")
setwd("~/Desktop/RA work/TBSignatureProfiler")
OriginalTrainingData = readRDS("~/Desktop/OriginalTrainingData.RDS")
TBsignaturesSplit = readRDS("~/Desktop/TBsignaturesSplit.RDS")
usethis::use_data(OriginalTrainingData)
usethis::use_data(TBsignaturesSplit)
warnings()
warnings()
warnings()
?evaluateOriginalModel
??evaluateOriginalModel
??evaluateOriginalModel()
devtools::load_all()
warnings()
??evaluateOriginalModel()
?evaluateOriginalModel()
??evaluateOriginalModel
?evaluateOriginalModel
??evaluateOriginalModel
help("evaluateOriginalModel")
devtools::document()
?ObtainSampleScore_OriginalModel
?ObtainSampleScore_OriginalModel
?evaluateOriginalModel
?.OriginalModel_NoRetraining
?evaluateOriginalModel
?ref_combat_impute
?.OriginalModel_Retraining
?subsetGeneSet
?ObtainSampleScore_OriginalModel
?ref_combat_impute
?ObtainSampleScore_OriginalModel
?.OriginalModel_Retraining
?ref_combat_impute
?.OriginalModel_Retraining
?ref_combat_impute
?ref_combat_impute
library(TBSignatureProfiler)
subsetGeneSet
?.OriginalModel_Retraining
?Reduce
install.packages("knn.covertree")
?evaluateOriginalModel
library(TBSignatureProfiler)
re <- evaluateOriginalModel(input = TB_hiv, useAssay = "counts",
geneSignaturesName = c("Anderson_42","Suliman_RISK_4"))
Khatri_set_PTB_Others = readRDS("~/Desktop/Khatri_set_PTB_Others.RDS")
source("~/Desktop/curatedTBData/R/TBSignatureProfiling.R")
sample_score_list <- lapply(Khatri_set_PTB_Others, function(x)
evaluateOriginalModel(input = x, useAssay = 1))
signature_NoRetraining <- c("Anderson_42", "Anderson_OD_51", "Kaforou_27",
"Kaforou_OD_44", "Kaforou_OD_53", "Sweeney_OD_3")
# Replace daCosta_OD_3 with LauxdaCosta_OD_3 to match with TBSignatureProfiler
signature_Retraining <- c("Maertzdorf_4", "Maertzdorf_15", "LauxdaCosta_OD_3",
"Verhagen_10", "Jacobsen_3", "Sambarey_HIV_10",
"Leong_24", "Berry_OD_86", "Berry_393", "Bloom_OD_144",
"Suliman_RISK_4", "Zak_RISK_16", "Leong_RISK_29")
Khatri_set_num_24 = readRDS("~/Desktop/Khatri_set_num_24.RDS")
get_weighted_mean <- function(dat, signature, train_list, percent=0.95,
num.boot = NULL, box_plot = FALSE){
lower <- (1-percent)/2
upper <- 1-lower
traindata <- train_list[[signature]]
dat <- dat %>% dplyr::filter(!GSE %in% traindata & Signature == signature)
observations <- dat$Observation
weighted_mean <- sum(dat$AUC * observations, na.rm = T)/sum(observations, na.rm = T)
if(is.null(num.boot)){
return(weighted_mean)
}else{
bootCI <- lapply(seq_len(num.boot), function(x){
index <- sample(seq_len(nrow(dat)), replace = TRUE)
AUC_boot <- dat$AUC[index]
obs_boot <- dat$Observation[index]
sum(AUC_boot * obs_boot, na.rm = T)/sum(obs_boot, na.rm = T)
})
bootCI <- unlist(bootCI)
bootCI <- stats::na.omit(bootCI)
if (box_plot){
re <- data.frame(Signature = signature, weighted_mean = bootCI)
return(re)
}
LowerAUC <- stats::quantile(bootCI, prob=lower, na.rm=TRUE)
UpperAUC <- stats::quantile(bootCI, prob=upper, na.rm=TRUE)
re <- c(weighted_mean,round(LowerAUC,4), round(UpperAUC,4))
names(re) <- c("Weighted Mean", paste0("CI lower.",lower*100,"%"),
paste0("CI upper.",upper*100,"%"))
return(re)
}
}
out_list_combine_NoRetraining <- combine_auc(sample_score_list, annotationColName = "TBStatus",
signatureColNames = paste0(c(signature_NoRetraining,signature_Retraining), "_OriginalModel"),
num.boot = NULL, percent = 0.95, AUC.abs = F)
AUC_OriginalModel_NoRetraining <- c()
out_list_combine_join_NoRetraining <- out_list_combine_NoRetraining %>%
inner_join(Khatri_set_num_24, by=c("GSE" = "GSE"))
out_list_combine_join_NoRetraining <- out_list_combine_NoRetraining %>%
dplyr::inner_join(Khatri_set_num_24, by=c("GSE" = "GSE"))
out_list_combine_join_NoRetraining$Signature <- gsub("_OriginalModel","",
out_list_combine_join_NoRetraining$Signature)
out_list_NoRetraining_final1 <- lapply(gene_set_NoRetraining, function(x){
get_weighted_mean(out_list_combine_join_NoRetraining, x, Khatri_training,
num.boot = 10000)
})
out_list_NoRetraining_final1 <- lapply(c(signature_NoRetraining,signature_Retraining), function(x){
get_weighted_mean(out_list_combine_join_NoRetraining, x, Khatri_training,
num.boot = 10000)
})
Khatri_training = readRDS("~/Desktop/Khatri_training.RDS")
out_list_NoRetraining_final1 <- lapply(c(signature_NoRetraining,signature_Retraining), function(x){
get_weighted_mean(out_list_combine_join_NoRetraining, x, Khatri_training,
num.boot = 10000)
})
out_list_NoRetraining_final <- do.call(rbind, out_list_NoRetraining_final1) %>% data.frame()
row.names(out_list_NoRetraining_final) <- c(signature_NoRetraining,signature_Retraining)
out_list_NoRetraining_final$Method <- "OriginalModel"
out_list_NoRetraining_final$Signature <- row.names(out_list_NoRetraining_final)
View(out_list_NoRetraining_final)
TBSPapp()
lintr::lint("~/Desktop/RA work/TBSignatureProfiler/R/OriginalModel.R")
devtools::install_github("jimhester/lintr")
lintr::lint("~/Desktop/RA work/TBSignatureProfiler/R/OriginalModel.R")
lintr::lint("~/Desktop/RA work/TBSignatureProfiler")
lintr::lint("~/Desktop/RA work/TBSignatureProfiler/R/OriginalModel.R")
# Add Duffy_MOUSE_23 to TBSignatureProfiler
addTBsignature(sigsymbols = c("GBP2", "SLAMF8", "IL27", "GPR141","CD300E",
"MS4A6A", "VCAN", "PLAC8", "MS4A4A", "ALPK1",
"TMEM51", "TGM2", "HAVCR2", "IQSEC2", "CX3CR1",
"HFE", "ARHGEF10L", "C3", "CCR5", "TPPP3",
"ZFYVE9", "SH2D1B", "KLRG1"),
authname = "Duffy",
sigtype = "Disease",
tissuetype = "PBMC",
signame_common = NULL,
saveobjs = FALSE,
views = FALSE)
devtools::load_all()
# Add Duffy_MOUSE_23 to TBSignatureProfiler
addTBsignature(sigsymbols = c("GBP2", "SLAMF8", "IL27", "GPR141","CD300E",
"MS4A6A", "VCAN", "PLAC8", "MS4A4A", "ALPK1",
"TMEM51", "TGM2", "HAVCR2", "IQSEC2", "CX3CR1",
"HFE", "ARHGEF10L", "C3", "CCR5", "TPPP3",
"ZFYVE9", "SH2D1B", "KLRG1"),
authname = "Duffy",
sigtype = "Disease",
tissuetype = "PBMC",
signame_common = NULL,
saveobjs = FALSE,
views = FALSE)
# Add Duffy_MOUSE_23 to TBSignatureProfiler
addTBsignature(sigsymbols = c("GBP2", "SLAMF8", "IL27", "GPR141","CD300E",
"MS4A6A", "VCAN", "PLAC8", "MS4A4A", "ALPK1",
"TMEM51", "TGM2", "HAVCR2", "IQSEC2", "CX3CR1",
"HFE", "ARHGEF10L", "C3", "CCR5", "TPPP3",
"ZFYVE9", "SH2D1B", "KLRG1"),
authname = "Duffy",
sigtype = "Disease",
tissuetype = "PBMC",
signame_common = "Duffy_MOUSE_23",
saveobjs = FALSE,
views = FALSE)
addTBsignature(sigsymbols = c("GBP2", "SLAMF8", "IL27", "GPR141","CD300E",
"MS4A6A", "VCAN", "PLAC8", "MS4A4A", "ALPK1",
"TMEM51", "TGM2", "HAVCR2", "IQSEC2", "CX3CR1",
"HFE", "ARHGEF10L", "C3", "CCR5", "TPPP3",
"ZFYVE9", "SH2D1B", "KLRG1"),
authname = "Duffy",
signame_common = NULL,
sigtype = "Disease",
tissuetype = "PBMCs",
saveobjs = TRUE,
views = TRUE)
addTBsignature(sigsymbols = c("GBP2", "SLAMF8", "IL27", "GPR141","CD300E",
"MS4A6A", "VCAN", "PLAC8", "MS4A4A", "ALPK1",
"TMEM51", "TGM2", "HAVCR2", "IQSEC2", "CX3CR1",
"HFE", "ARHGEF10L", "C3", "CCR5", "TPPP3",
"ZFYVE9", "SH2D1B", "KLRG1"),
authname = "Duffy",
signame_common = NULL,
sigtype = "Disease",
tissuetype = "PBMC",
saveobjs = TRUE,
views = TRUE)
TBsignatures
names(TBsignatures)
devtools::load_all()
data("TBsignatures")
names(TBsignatures)
mkTBreference <- function(TBsigname, ref, DOInum) {
cat("\\item{\\strong{", TBsigname, "}}{: ", ref,
" \\href{http://dx.doi.org/", DOInum, "}{", DOInum, "}}", sep = "")
}
mkTBreference(TBsigname = "Duffy_23", # The name output in a message from addTBsignature()
ref = "Duffy FJ, Olson GS, Gold ES, Jahn A, Aderem A, Aitchison J, Rothchild AC, Diercks AH, Nemeth J. A contained Mycobacterium tuberculosis mouse infection model predicts active disease and containment in humans. The Journal of Infectious Diseases. 2021 Mar 10.",
DOInum = "10.1093/infdis/jiab130")
TBcommon
names(TBcommon)
names(TBsignatures)
addTBsignature(sigsymbols = c("GBP2", "SLAMF8", "IL27", "GPR141","CD300E",
"MS4A6A", "VCAN", "PLAC8", "MS4A4A", "ALPK1",
"TMEM51", "TGM2", "HAVCR2", "IQSEC2", "CX3CR1",
"HFE", "ARHGEF10L", "C3", "CCR5", "TPPP3",
"ZFYVE9", "SH2D1B", "KLRG1"),
authname = "Duffy",
signame_common = "Duffy_MOUSE_23",
sigtype = "Disease",
tissuetype = "PBMC",
saveobjs = TRUE,
views = TRUE)
TBcommon
TBcommon %>% names
devtools::load_all()
TBcommon %>% names
common_sigAnnotData %>% names
View(common_sigAnnotData)
devtools::load_all()
TBsignatures %>% names()
data("TBsignatures")
names(TBsignatures)
addTBsignature(sigsymbols = c("GBP2", "SLAMF8", "IL27", "GPR141","CD300E",
"MS4A6A", "VCAN", "PLAC8", "MS4A4A", "ALPK1",
"TMEM51", "TGM2", "HAVCR2", "IQSEC2", "CX3CR1",
"HFE", "ARHGEF10L", "C3", "CCR5", "TPPP3",
"ZFYVE9", "SH2D1B", "KLRG1"),
authname = "Duffy",
signame_common = "Duffy_MOUSE_23",
sigtype = "Disease",
tissuetype = "PBMC",
saveobjs = TRUE,
views = TRUE)
devtools::load_all()
data("TBsignatures")
names(TBsignatures)
names(TBcommon)
data(TBcommon)
lintr::lint("~/Desktop/RA work/TBSignatureProfiler/R/OriginalModel.R")
?evaluateOriginalModel()
warnings
warnings()
devtools::load_all()
?evaluateOriginalModel()
lintr::lint(
"~/Desktop/RA work/TBSignatureProfiler/R/OriginalModel.R"
)
for (i in seq_len(4)){}
for (i in seq_len(4)){print(i)}
lintr::lint(
"~/Desktop/RA work/TBSignatureProfiler/R/OriginalModel.R"
)
lintr::lint(
"~/Desktop/RA work/TBSignatureProfiler/R/OriginalModel.R"
)
lintr::lint(
"~/Desktop/RA work/TBSignatureProfiler/R/OriginalModel.R"
)
lintr::lint(
"~/Desktop/RA work/TBSignatureProfiler/R/OriginalModel.R"
)
lintr::lint(
"~/Desktop/RA work/TBSignatureProfiler/R/OriginalModel.R"
)
source("~/Desktop/curatedTBData/R/TBSignatureProfiling.R")
Khatri_set_PTB_Others = readRDS("~/Desktop/Khatri_set_PTB_Others.RDS")
# Run the entire analysis
sample_score_list <- lapply(Khatri_set_PTB_Others, function(x)
evaluateOriginalModel(input = x, useAssay = 1))
signature_NoRetraining <- c("Anderson_42", "Anderson_OD_51", "Kaforou_27",
"Kaforou_OD_44", "Kaforou_OD_53", "Sweeney_OD_3")
# Replace daCosta_OD_3 with LauxdaCosta_OD_3 to match with TBSignatureProfiler
signature_Retraining <- c("Maertzdorf_4", "Maertzdorf_15", "LauxdaCosta_OD_3",
"Verhagen_10", "Jacobsen_3", "Sambarey_HIV_10",
"Leong_24", "Berry_OD_86", "Berry_393", "Bloom_OD_144",
"Suliman_RISK_4", "Zak_RISK_16", "Leong_RISK_29")
Khatri_set_num_24 = readRDS("~/Desktop/Khatri_set_num_24.RDS")
get_weighted_mean <- function(dat, signature, train_list, percent=0.95,
num.boot = NULL, box_plot = FALSE){
lower <- (1-percent)/2
upper <- 1-lower
traindata <- train_list[[signature]]
dat <- dat %>% dplyr::filter(!GSE %in% traindata & Signature == signature)
observations <- dat$Observation
weighted_mean <- sum(dat$AUC * observations, na.rm = T)/sum(observations, na.rm = T)
if(is.null(num.boot)){
return(weighted_mean)
}else{
bootCI <- lapply(seq_len(num.boot), function(x){
index <- sample(seq_len(nrow(dat)), replace = TRUE)
AUC_boot <- dat$AUC[index]
obs_boot <- dat$Observation[index]
sum(AUC_boot * obs_boot, na.rm = T)/sum(obs_boot, na.rm = T)
})
bootCI <- unlist(bootCI)
bootCI <- stats::na.omit(bootCI)
if (box_plot){
re <- data.frame(Signature = signature, weighted_mean = bootCI)
return(re)
}
LowerAUC <- stats::quantile(bootCI, prob=lower, na.rm=TRUE)
UpperAUC <- stats::quantile(bootCI, prob=upper, na.rm=TRUE)
re <- c(weighted_mean,round(LowerAUC,4), round(UpperAUC,4))
names(re) <- c("Weighted Mean", paste0("CI lower.",lower*100,"%"),
paste0("CI upper.",upper*100,"%"))
return(re)
}
}
out_list_combine_NoRetraining <- combine_auc(sample_score_list, annotationColName = "TBStatus",
signatureColNames = paste0(c(signature_NoRetraining,signature_Retraining), "_OriginalModel"),
num.boot = NULL, percent = 0.95, AUC.abs = F)
AUC_OriginalModel_NoRetraining <- c()
out_list_combine_join_NoRetraining <- out_list_combine_NoRetraining %>%
dplyr::inner_join(Khatri_set_num_24, by=c("GSE" = "GSE"))
out_list_combine_join_NoRetraining$Signature <- gsub("_OriginalModel","",
out_list_combine_join_NoRetraining$Signature)
Khatri_training = readRDS("~/Desktop/Khatri_training.RDS")
out_list_NoRetraining_final1 <- lapply(c(signature_NoRetraining,signature_Retraining), function(x){
get_weighted_mean(out_list_combine_join_NoRetraining, x, Khatri_training,
num.boot = 10000)
})
out_list_NoRetraining_final <- do.call(rbind, out_list_NoRetraining_final1) %>% data.frame()
row.names(out_list_NoRetraining_final) <- c(signature_NoRetraining,signature_Retraining)
out_list_NoRetraining_final$Method <- "OriginalModel"
out_list_NoRetraining_final$Signature <- row.names(out_list_NoRetraining_final)
View(out_list_NoRetraining_final)
TBcommon
names(TBcommon)
devtools::load_all()
names(TBcommon)
names(TBsignatures)
load("~/Downloads/TBcommon.rda")
names(TBcommon)
rm(TBsignatures,TBcommon)
data(TBcommon)
names(TBcommon)
data("TBsignatures")
names(TBsignatures)
addTBsignature(sigsymbols = c("GBP2", "SLAMF8", "IL27", "GPR141","CD300E",
"MS4A6A", "VCAN", "PLAC8", "MS4A4A", "ALPK1",
"TMEM51", "TGM2", "HAVCR2", "IQSEC2", "CX3CR1",
"HFE", "ARHGEF10L", "C3", "CCR5", "TPPP3",
"ZFYVE9", "SH2D1B", "KLRG1"),
authname = "Duffy",
signame_common = "CMTB-CT",
sigtype = "Disease",
tissuetype = "PBMC",
saveobjs = TRUE,
views = TRUE)
rm(TBcommon, TBsignatures)
devtools::load_all()
data("TBsignatures")
names(TBsignatures)
names(TBcommon)
rm(TBsignatures,TBcommon)
devtools::load_all()
addTBsignature(sigsymbols = c("GBP2", "SLAMF8", "IL27", "GPR141","CD300E",
"MS4A6A", "VCAN", "PLAC8", "MS4A4A", "ALPK1",
"TMEM51", "TGM2", "HAVCR2", "IQSEC2", "CX3CR1",
"HFE", "ARHGEF10L", "C3", "CCR5", "TPPP3",
"ZFYVE9", "SH2D1B", "KLRG1"),
authname = "Duffy",
signame_common = "CMTB_CT",
sigtype = "Disease",
tissuetype = "PBMC",
saveobjs = TRUE,
views = TRUE)
TBsignatures %>% names()
data("TBsignatures")
names(TBsignatures)
devtools::load_all()
TBsignatures %>% names
TBcommon %>% names
rm(TBsignatures,TBcommon)
names(TBsignatures)
table("krhizmmgmcrecekgyljqkldocicziihtgpqwbticmvuyznragqoyrukzopfmjhjjxemsxmrsxuqmnkrzhgvtgdgtykhcglurvppvcwhrhrjoislonvvglhdciilduvuiebmffaagxerjeewmtcwmhmtwlxtvlbocczlrppmpjbpnifqtlninyzjtmazxdbzwxthpvrfulvrspycqcghuopjirzoeuqhetnbrcdakilzmklxwudxxhwilasbjjhhfgghogqoofsufysmcqeilaivtmfziumjloewbkjvaahsaaggteppqyuoylgpbdwqubaalfwcqrjeycjbbpifjbpigjdnnswocusuprydgrtxuaojeriigwumlovafxnpibjopjfqzrwemoinmptxddgcszmfprdrichjeqcvikynzigleaajcysusqasqadjemgnyvmzmbcfrttrzonwafrnedglhpudovigwvpimttiketopkvqw")
